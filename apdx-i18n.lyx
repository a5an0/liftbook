#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Internationalization
\begin_inset CommandInset label
LatexCommand label
name "cha:Internationalization"

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout
Internationalization | see I18N
\end_layout

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout
I18N
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The ability to display pages to users of multiple languages is a common
 feature of many web frameworks.
 Lift builds on the underlying Java I18N foundations
\begin_inset Foot
status open

\begin_layout Plain Layout
Primarily java.util.Locale and java.util.ResourceBundle
\end_layout

\end_inset

 to provide a simple yet flexible means for using Locales and translated
 strings in your app.
 Locales are used to control not only what language the text is in that's
 presented to the user, but also number and date formatting, among others.
 If you want more details on the underlying foundation of Java I18N we suggest
 you visit the Internationalization Homepage at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://java.sun.com/javase/technologies/core/basic/intl/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Another note is that languages are selected in Lift using language tags,
 as defined in 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.w3.org/International/articles/language-tags/
\end_layout

\end_inset

.
 Language tags are base on the ISO 639 standard
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
\end_layout

\end_inset


\end_layout

\end_inset

.
 In general, you should keep language tags as short as possible and avoid
 adding information (such as regional specifiers) that does not provide
 otherwise distinguishing information.
 For example, if your Spanish page will be used for both Mexican and Spanish
 clients without modification, simply use 
\family typewriter
es
\family default
 and not 
\family typewriter
es_MX
\family default
 or 
\family typewriter
es_ES
\family default
.
\end_layout

\begin_layout Section
Localized Templates
\begin_inset CommandInset label
LatexCommand label
name "sec:Localized-Templates"

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout
I18N ! Localized templates
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we described in Section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Templates"

\end_inset

, Lift automatically chooses the template for a request based on the current
 locale by appending the locale's variants.
 That means that a request for 
\family typewriter
/index
\family default
 with a calculated locale of 
\family typewriter
en_US
\family default
 will try these filenames, in order:
\end_layout

\begin_layout Itemize

\family typewriter
index_en_US.html
\end_layout

\begin_layout Itemize

\family typewriter
index_en.html
\end_layout

\begin_layout Itemize

\family typewriter
index.html
\end_layout

\begin_layout Standard
Note that Java upper-cases the country portion of the locale, so you need
 to make sure you name your templates accordingly.
 For instance, in the above example a file named 
\family typewriter
index_en_us.html
\family default
 wouldn't match
\begin_inset Note Note
status open

\begin_layout Plain Layout
I tested this locally.
 Not sure if this is something we would want to fix in Lift
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Resource Bundles
\begin_inset CommandInset label
LatexCommand label
name "sec:Resource-Bundles"

\end_inset


\end_layout

\begin_layout Standard
Resource bundles are sets of property files
\begin_inset Foot
status open

\begin_layout Plain Layout
Technically, they can have other formats, but Lift generally only deals
 with 
\family typewriter
PropertyResourceBundles
\end_layout

\end_inset

 that contain keyed strings for your application to use in messages.
 In addition to the key/value pair contents of the files, the filename itself
 is significant.
 When a 
\family typewriter
ResourceBundle
\family default
 is specified by name, the base name is used as the default, and additional
 files with names of the form 
\begin_inset Quotes eld
\end_inset

<base name>_<language tag>
\begin_inset Quotes erd
\end_inset

 can be used to specify translations of the default strings in a given language.
 As an example, consider listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Default-door-bundle"

\end_inset

, which specifies a default resource bundle for an application that reports
 the status of a door (open or closed).
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Default Door Bundle
\begin_inset CommandInset label
LatexCommand label
name "lst:Default-door-bundle"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

openStatus=The door is open
\end_layout

\begin_layout Plain Layout

closedStatus=The door is closed
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Suppose this file is called 
\begin_inset Quotes eld
\end_inset

DoorMessages.properties
\begin_inset Quotes erd
\end_inset

; we can provide an additional translation for Spanish by creating a file
 called 
\begin_inset Quotes eld
\end_inset

DoorMessages_es.properties
\begin_inset Quotes erd
\end_inset

, shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Spanish-door-bundle"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Spanish Door Bundle
\begin_inset CommandInset label
LatexCommand label
name "lst:Spanish-door-bundle"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

openStatus=La puerta está abierta
\end_layout

\begin_layout Plain Layout

closedStatus=La puerta está cerrada
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you want to retrieve a message (covered in the next two sections) Lift
 will check the current Locale and see if there's a specialized ResourceBundle
 available for it.
 If so, it uses the messages in that file; otherwise, it uses the default
 bundle.
 
\end_layout

\begin_layout Standard
Lift supports using multiple resource bundle files so that you can break
 your messages up into functional groups.
 You specify this by setting the 
\family typewriter
LiftRules.resourceNames
\family default
 property to a list of the base names (without a language or 
\begin_inset Quotes eld
\end_inset

.properties
\begin_inset Quotes erd
\end_inset

 extension):
\end_layout

\begin_layout LyX-Code
LiftRules.resourceNames = "DoorMessages" :: 
\end_layout

\begin_layout LyX-Code
                          "DoorknobMessages" :: Nil
\end_layout

\begin_layout Standard
The order that you define the resource bundle names is the order that they'll
 be searched for keys.
 The message properties files should be located in your 
\family typewriter
WEB-INF/classes
\family default
 folder so that they are accessible from Lift's classloader
\begin_inset Foot
status open

\begin_layout Plain Layout
The properties files are retrieved with 
\family typewriter
ClassLoader.getResourceAsStream
\end_layout

\end_inset

; if you're using Maven this will happen if you put your files in the 
\family typewriter
src/main/resources
\family default
 directory.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note: According to the 
\family typewriter
Properties
\family default
 documentation
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://download.oracle.com/javase/6/docs/api/java/util/Properties.html
\end_layout

\end_inset


\end_layout

\end_inset

, keys 
\emph on
must
\emph default
 escape significant whitespace, colons or equals signs in the key itself
 with backslashes.
 For example, to specify 
\begin_inset Quotes eld
\end_inset

this = that
\begin_inset Quotes erd
\end_inset

 as a key, you would have to write it as 
\begin_inset Quotes eld
\end_inset

this
\backslash
 
\backslash
=
\backslash
 that
\begin_inset Quotes erd
\end_inset

 in the properties file.
\begin_inset Index
status open

\begin_layout Plain Layout
I18N ! whitespace in keys
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
An Important Note on Resource Bundle Resolution
\begin_inset Index
status open

\begin_layout Plain Layout
I18N ! Resource bundle resolution
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per Java’s documentation on 
\begin_inset CommandInset href
LatexCommand href
name "ResourceBundle"
target "http://java.sun.com/javase/6/docs/api/java/util/ResourceBundle.html#getBundle(java.lang.String,%20java.util.Locale,%20java.lang.ClassLoader)"

\end_inset

, resolution of property files is done in this order:
\end_layout

\begin_layout Itemize
baseName + “_” + language1 + “_” + country1 + “_” + variant1
\end_layout

\begin_layout Itemize
baseName + “_” + language1 + “_” + country1
\end_layout

\begin_layout Itemize
baseName + “_” + language1
\end_layout

\begin_layout Itemize
baseName + “_” + language2 + “_” + country2 + “_” + variant2
\end_layout

\begin_layout Itemize
baseName + “_” + language2 + “_” + country2
\end_layout

\begin_layout Itemize
baseName + “_” + language2
\end_layout

\begin_layout Itemize
baseName
\end_layout

\begin_layout Standard
where “language1”, “country1”, and “variant1” are the requested locale parameter
s, and “language2”, “country2”, “variant2” are the default locale parameters.
\end_layout

\begin_layout Standard
For example, if the default locale for your computer is “en_GB”, someone
 requests a page for “ja”, and you have the following property files defined:
\end_layout

\begin_layout Itemize
Messages_fr_FR.properties
\end_layout

\begin_layout Itemize
Messages_en_GB.properties
\end_layout

\begin_layout Itemize
Messages.properties
\end_layout

\begin_layout Standard
then the 
\series bold
Messages_en_GB.properties
\series default
 file, and not 
\series bold
Messages.properties
\series default
 will be used.
 If you want to change this behavior so that any undefined locales utilize
 the base properties file, set your default Locale to the ROOT locale in
 your 
\family typewriter
Boot.scala
\family default
 with the code shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Setting-the-ROOT-locale"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lst:Setting-the-ROOT-locale"

\end_inset

Setting the ROOT Default Locale
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

import java.util.Locale
\end_layout

\begin_layout Plain Layout

Locale.setDefault(Locale.ROOT)
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Localized Strings in Scala Code
\begin_inset CommandInset label
LatexCommand label
name "sec:Localized-Strings-in-Scala"

\end_inset


\end_layout

\begin_layout Standard
Retrieving localized strings in your Scala code is primarily performed using
 the 
\family typewriter
S.?
\family default
 method.
 When invoked with one argument the resource bundles are searched for a
 key matching the given argument.
 If a matching value is found it's returned.
 If it can't be found then Lift calls 
\family typewriter
LiftRules.localizationLookupFailureNotice
\family default
 on the (key, current Locale) pair and then simply returns the key.
 If you call 
\family typewriter
S.?
\family default
 with more than one argument, the first argument is still the key to look
 up, but any remaining arguments are used as format parameters for 
\family typewriter
String.format
\family default
 executed on the retrieved value.
 For example, listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Formatted-bundles"

\end_inset

 shows a sample bundle file and the associated Scala code for using message
 formatting.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Formatted Bundles
\begin_inset CommandInset label
LatexCommand label
name "lst:Formatted-bundles"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

// bundle
\end_layout

\begin_layout Plain Layout

tempMsg=The current temperature is %0.1 degrees
\end_layout

\begin_layout Plain Layout

// code
\end_layout

\begin_layout Plain Layout

var currentTmp : Double = getTemp()
\end_layout

\begin_layout Plain Layout

Text(S.?("tempMsg", currentTemp))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lift also provides the 
\family typewriter
S.??
\family default
 method, which is similar to 
\family typewriter
S.?
\family default
 but uses the 
\family typewriter
ResourceBundle
\family default
 for internal Lift strings.
 Lift's resource-bundles are located in the i18n folder with the name lift-core.p
roperties The resource-bundle name is given by 
\family typewriter
LiftRules.liftCoreResourceName
\family default
 variable.
 Generally you won't use this method.
\end_layout

\begin_layout Section
Formatting Localized Strings
\end_layout

\begin_layout Standard
While Lift provides facilities for retrieving strings from localized property
 bundles (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Localized-Strings-in-Scala"

\end_inset

), it does not provide direct support for localized formatting of those
 strings.
 There is an 
\family typewriter
S.?
\family default
 method which takes additional parameters, but it uses 
\family typewriter
String.format
\family default
 (and printf syntax) to format the strings and does not properly support
 date/time formatting.
 Instead, we recommend you use 
\family typewriter
java.text.MessageFormat
\family default
 for localized strings that will use parameters.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:A-Utility-Method-l10n"

\end_inset

 shows a utility method that you can use in your code to localize strings
 with parameters.
 Note that if you have a lot of Lift's implicit conversions in scope you
 may need to explicitly type some arguments as we have in this example.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
A Utility Method for Localizing Strings
\begin_inset CommandInset label
LatexCommand label
name "lst:A-Utility-Method-l10n"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

private def i10n(key : String, args : Object*) = {
\end_layout

\begin_layout Plain Layout

 import java.text.{FieldPosition,MessageFormat}
\end_layout

\begin_layout Plain Layout

 val formatter = new MessageFormat(S.?(key), S.locale)
\end_layout

\begin_layout Plain Layout

 formatter.format(args.toArray, new StringBuffer, new FieldPosition(0)).toString
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Usage:
\end_layout

\begin_layout Plain Layout

<span>{i10n("welcome", new java.util.Date, 6 : Integer)}</span>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Localized Strings in Templates
\begin_inset Index
status open

\begin_layout Plain Layout
I18N ! Localized templates
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can add localized strings directly in your templates through the 
\family typewriter
<lift:loc />
\family default
 tag.
 You can either provide a locid attribute on the tag which is used as the
 lookup key, or if you don't provide one, the contents of the tag will be
 used as the key.
 In either case, if the key can't be found in any resource bundles, the
 contents of the tag will be used.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Using-the-loc-tag"

\end_inset

 shows some examples of how you could use lift:loc.
 In both examples, assume that we're using the resource bundle shown in
 listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Spanish-door-bundle"

\end_inset

.
 The fallthrough behavior lets us put a default text (English) directly
 in the template, although for consistency you should usually provide an
 explicit bundle for all languages.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Using the loc tag
\begin_inset CommandInset label
LatexCommand label
name "lst:Using-the-loc-tag"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<!-- using explicit key (preferred) -->
\end_layout

\begin_layout Plain Layout

<lift:loc locid="openStatus">The door is open</lift:loc>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!-- should be the same result, but a missing bundle
\end_layout

\begin_layout Plain Layout

     will result in the key being displayed -->
\end_layout

\begin_layout Plain Layout

<lift:loc>openStatus</lift:loc>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Calculating Locale
\begin_inset Index
status open

\begin_layout Plain Layout
I18N ! Calculating locale
\end_layout

\end_inset


\begin_inset Index
status open

\begin_layout Plain Layout
Locale ! calculating
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Locale
\family default
 for a given request is calculated by the function set in
\family typewriter
 LiftRules.localeCalculator
\family default
, a 
\begin_inset Formula $(Box[HttpServletRequest])\Rightarrow Locale$
\end_inset

.
 The default behavior is to call 
\family typewriter
getLocale
\family default
 on the 
\family typewriter
HTTPRequest
\family default
, which allows the server to set it if your clients send locale preferences.
 If that call returns null, then 
\family typewriter
Locale.getDefault
\family default
 is used.
 You can provide your own function for calculating locales if you desire.
 
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Calculating-Locale-Based"

\end_inset

 shows how you can use a cookie in addition to a URL query parameter to
 select the locale for your pages
\begin_inset Foot
status open

\begin_layout Plain Layout
Thanks to Tim Perret for the original examples at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://blog.getintheloop.eu/2009/7/26/how-to-extensive-localization-with-the-liftw
eb-framework
\end_layout

\end_inset


\end_layout

\end_inset

.
 This code would be placed in your 
\family typewriter
Boot.boot
\family default
 method.
 Lines 2-3 define some imports beyond the standard imports (see Section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "lst:Standard-import-statements"

\end_inset

).
 Lines 6-10 define a utility function to convert a language tag string into
 a 
\family typewriter
Locale
\family default
.
 Line 13 defines the name of the cookie that will store your locale choice.
 Lines 15-34 define the partial function that will be used to compute the
 new 
\family typewriter
Locale
\family default
.
 First, we only do computation if the 
\family typewriter
LiftRules.localeCalculator
\family default
 method is invoked with an 
\family typewriter
HTTPRequest
\family default
 (line 16).
 Our next step is to determine the current locale by checking whether there
 is an existing locale cookie set (lines 18-20), or by utilizing the default
 Lift locale calculator (line 21).
 Our next check is to determine if the user has explicitly requested a locale
 via a query parameter (line 24).
 If the parameter is set (and not 
\family typewriter
null
\family default
), we construct a new 
\family typewriter
Locale
\family default
 from the value (line 26), set the cookie so that the request is remembered
 (line 27), and return the new locale.
 If there is no request parameter then we use the current locale as defined
 on line 18.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Calculating Locale Based on Cookies and Parameters
\begin_inset CommandInset label
LatexCommand label
name "lst:Calculating-Locale-Based"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

// Import the classes we'll be using beyond the standard imports
\end_layout

\begin_layout Plain Layout

import java.util.Locale
\end_layout

\begin_layout Plain Layout

import provider.{HTTPCookie,HTTPRequest}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Properly convert a language tag to a Locale
\end_layout

\begin_layout Plain Layout

def computeLocale(tag : String) = tag.split(Array('-', '_')) match {
\end_layout

\begin_layout Plain Layout

  case Array(lang) => new Locale(lang)
\end_layout

\begin_layout Plain Layout

  case Array(lang, country) => new Locale(lang, country)
\end_layout

\begin_layout Plain Layout

  case Array(lang, country, variant) => new Locale(lang, country, variant)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Define this to be whatever name you want
\end_layout

\begin_layout Plain Layout

val LOCALE_COOKIE_NAME = "SelectedLocale"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

LiftRules.localeCalculator = {
\end_layout

\begin_layout Plain Layout

  case fullReq @ Full(req) => {
\end_layout

\begin_layout Plain Layout

    // Check against a set cookie, or the locale sent in the request 
\end_layout

\begin_layout Plain Layout

    def currentLocale : Locale = 
\end_layout

\begin_layout Plain Layout

      S.findCookie(LOCALE_COOKIE_NAME).flatMap { 
\end_layout

\begin_layout Plain Layout

        cookie => cookie.value.map(computeLocale) 
\end_layout

\begin_layout Plain Layout

      } openOr LiftRules.defaultLocaleCalculator(fullReq)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Check to see if the user explicitly requests a new locale 
\end_layout

\begin_layout Plain Layout

    S.param("locale") match { 
\end_layout

\begin_layout Plain Layout

      case Full(requestedLocale) if requestedLocale != null => { 
\end_layout

\begin_layout Plain Layout

        val computedLocale = computeLocale(requestedLocale) 
\end_layout

\begin_layout Plain Layout

        S.addCookie(HTTPCookie(LOCALE_COOKIE_NAME, requestedLocale)) 
\end_layout

\begin_layout Plain Layout

        computedLocale 
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      case _ => currentLocale 
\end_layout

\begin_layout Plain Layout

    } 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  case _ => Locale.getDefault 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
