#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Third Party Integrations
\end_layout

\begin_layout Standard
In this chapter we'll explore how you can integrate Lift with some well-known
 third party libraries and applications
\end_layout

\begin_layout Section
OpenID Integration
\end_layout

\begin_layout Standard
The OpenID Foundation
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://openid.net/
\end_layout

\end_inset


\end_layout

\end_inset

 explain OpenID as:
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

OpenID eliminates the need for multiple usernames across different websites,
 simplifying your online experience.
\end_layout

\begin_layout Standard
You get to choose the OpenID Provider that best meets your needs and most
 importantly that you trust.
 At the same time, your OpenID can stay with you, no matter which Provider
 you move to.
 And best of all, the OpenID technology is not proprietary and is completely
 free.
 For businesses, this means a lower cost of password and account management,
 while drawing new web traffic.
 OpenID lowers user frustration by letting users have control of their login.
 For geeks, OpenID is an open, decentralized, free framework for user-centric
 digital identity.
 OpenID takes advantage of already existing internet technology (URI, HTTP,
 SSL, Diffie-Hellman) and realizes that people are already creating identities
 for themselves whether it be at their blog, photostream, profile page,
 etc.
 With OpenID you can easily transform one of these existing URIs into an
 account which can be used at sites which support OpenID logins.
\end_layout

\begin_layout Standard
OpenID is still in the adoption phase and is becoming more and more popular,
 as large organizations like AOL, Microsoft, Sun, Novell, etc.
 begin to accept and provide OpenIDs.
 Today it is estimated that there are over 160-million OpenID enabled URIs
 with nearly ten-thousand sites supporting OpenID logins.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Lift provides openId support using onepID4Java
\begin_inset Foot
status open

\begin_layout Plain Layout
http://code.google.com/p/openid4java/
\end_layout

\end_inset

.
 It provides two fundamental traits 
\family typewriter
net.liftweb.openId.OpenIdVendor
\family default
 and 
\family typewriter
net.liftweb.openId.OpenIdConsumer.
 OpenIdVendor
\family default
 contains variables such as:
\end_layout

\begin_layout Itemize
PathRoot - The path sequence for processing OpenID requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

openid
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
LoginPath - The path sequence for processing login requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

login
\begin_inset Quotes erd
\end_inset

.
 The login path will be /openid/login
\end_layout

\begin_layout Itemize
LogoutPath - The path sequence for processing logout requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

logout
\begin_inset Quotes erd
\end_inset

.
 The login path will be /openid/logour
\end_layout

\begin_layout Itemize
ResponsePath - The path sequence for processing login requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

response
\begin_inset Quotes erd
\end_inset

.
 The login path will be /openid/response
\end_layout

\begin_layout Itemize
PostParamName - The form parameter name containing the OpeID identity URL
 entered by the user
\end_layout

\begin_layout Standard
Also the vendor trait contains the loginForm function that returns the login
 form containing an input text field for the OpenID identity and the submit
 button.
 The form will point to /<PathRoot>/<LoginPath> where PathRoot and LoginPath
 are the variables described above.
 Here is an example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
OpenID example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

// Your template
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<lift:OpenID.form>
\end_layout

\begin_layout Plain Layout

  <openId:renderForm/>
\end_layout

\begin_layout Plain Layout

</lift:OpenID.form>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Your snippet
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class OpenID {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def renderForm(xhtml: NodeSeq) : NodeSeq = {
\end_layout

\begin_layout Plain Layout

    SimpleOpenIdVendor.loginForm
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Boot {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

  // This is needed in order to process the login and logout requests and
 also to process
\end_layout

\begin_layout Plain Layout

  // the response comming from OpenID provider
\end_layout

\begin_layout Plain Layout

  LiftRules.dispatch.append(SimpleOpenIdVendor.dispatchPF)
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
That is pretty much all you need to add into your Lift application.
 The authentication flow is:
\end_layout

\begin_layout Enumerate
User accesses your lift page that contains the OpenID form
\end_layout

\begin_layout Enumerate
User enters his/her OpenID identity URL and submits the form.
 Note that you don't have to use the default login form asyou can construct
 your own as long as the form is submitted to the correct path and contains
 the correct input text parameter name.
\end_layout

\begin_layout Enumerate
The dispatchPF function that we appended above will process the /openid/login
 request and will send the authentication request to the Identity Provider
 site
\end_layout

\begin_layout Enumerate
Identity Provider will validate the user and redirect back to your Lift
 application to /openid/response path.
\end_layout

\begin_layout Enumerate
The response is validated using OpenId4Java library
\end_layout

\begin_layout Enumerate

\family typewriter
OpenIdConsumer.postLogin
\family default
 gets called.
\end_layout

\begin_layout Standard
The SimpleOpenIDVendor looks like:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
SimpleOpenIDVendor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

trait SimpleOpenIdVendor extends OpenIdVendor {   
\end_layout

\begin_layout Plain Layout

  type UserType = Identifier   
\end_layout

\begin_layout Plain Layout

  type ConsumerType = OpenIdConsumer[UserType]
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  def currentUser = OpenIdUser.is
\end_layout

\begin_layout Plain Layout

  def postLogin(id: Box[Identifier],res: VerificationResult): Unit = {
\end_layout

\begin_layout Plain Layout

    id match {
\end_layout

\begin_layout Plain Layout

      case Full(id) => S.notice("Welcome "+id)
\end_layout

\begin_layout Plain Layout

      case _ => S.error("Failed to authenticate")
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    OpenIdUser(id)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  def logUserOut() {
\end_layout

\begin_layout Plain Layout

    OpenIdUser.remove   
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  def displayUser(in: UserType): NodeSeq = Text("Welcome "+in)
\end_layout

\begin_layout Plain Layout

  def createAConsumer = new AnyRef with OpenIDConsumer[UserType]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

object SimpleOpenIdVendor extends SimpleOpenIdVendor 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the postLogin implementation.
 Of course if you need a more complex post-login processing you can extend
 OpenIdVendor by yourself.
 
\end_layout

\begin_layout Standard
During this message exchange between the Identity Provider ans your Lift
 application, Lift utilizes a couple of SessionVars:
\end_layout

\begin_layout Itemize
OpenIdObject - holds an OpenIdConsumer
\end_layout

\begin_layout Itemize
OpenIdUser - holding an org.openid4java.discovery.Identifier
\end_layout

\begin_layout Section
AMQP 
\end_layout

\begin_layout Standard
AMQP stands for 
\series bold
A
\series default
dvanced 
\series bold
M
\series default
essage 
\series bold
Q
\series default
ueuing 
\series bold
P
\series default
rotocol
\begin_inset Foot
status open

\begin_layout Plain Layout
http://jira.amqp.org/confluence/display/AMQP/Advanced+Message+Queuing+Protocol
\end_layout

\end_inset

.
 It is an open Internet protocol for messaging.
 It is concepted as a binary representation of messages.
 Lift facilitates the work with AMQP using the RabbitMQ
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.rabbitmq.com/
\end_layout

\end_inset

 Java implementation.
 There are two fundamental classes:
\end_layout

\begin_layout Itemize

\family typewriter
net.liftweb.amqp.AMQPSender
\family default
 - used for sending AMQP messages
\end_layout

\begin_layout Itemize

\family typewriter
net.liftweb.amqp.AMQPDispatcher
\family default
 - used for receiving AMQP messages
\end_layout

\begin_layout Standard
Let's see how we can use Lift to send AMQP messages
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
AMQP sending messages example
\begin_inset CommandInset label
LatexCommand label
name "lst:AMQP-sending-messages"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  import net.liftweb.amqp._
\end_layout

\begin_layout Plain Layout

  import com.rabbitmq.client._ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  val params = new ConnectionParameters
\end_layout

\begin_layout Plain Layout

  // All of the params, exchanges, and queues are all just example data.
\end_layout

\begin_layout Plain Layout

  params.setUsername("guest")
\end_layout

\begin_layout Plain Layout

  params.setPassword("guest")
\end_layout

\begin_layout Plain Layout

  params.setVirtualHost("/")
\end_layout

\begin_layout Plain Layout

  params.setRequestedHeartbeat(0)
\end_layout

\begin_layout Plain Layout

  val factory = new ConnectionFactory(params)
\end_layout

\begin_layout Plain Layout

  val amqp = new StringAMQPSender(factory, "localhost", 5672, "mult", "routerout
e")
\end_layout

\begin_layout Plain Layout

  amqp.start
\end_layout

\begin_layout Plain Layout

  amqp ! AMQPMessage("hi") 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see the 
\family typewriter
AMQSender
\family default
 is leveraging Scala actors to send messages.
 Scala actors and AMQP messaging concepts play very well together.
\end_layout

\begin_layout Standard
Now let's see how we can receive and process AMQP messages:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
AMQP receiving messages example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import net.liftweb.amqp._
\end_layout

\begin_layout Plain Layout

import com.rabbitmq.client._ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * Example Dispatcher that listens on an example queue and exchange.
 Use this
\end_layout

\begin_layout Plain Layout

 * as your guiding example for creating your own Dispatcher.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

class ExampleSerializedAMQPDispatcher[T](factory: ConnectionFactory, host:
 String, port: Int)
\end_layout

\begin_layout Plain Layout

    extends AMQPDispatcher[T](factory, host, port) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  override def configure(channel: Channel) {
\end_layout

\begin_layout Plain Layout

    // Get the ticket.
\end_layout

\begin_layout Plain Layout

    val ticket = channel.accessRequest("/data")
\end_layout

\begin_layout Plain Layout

    // Set up the exchange and queue
\end_layout

\begin_layout Plain Layout

    channel.exchangeDeclare(ticket, "mult", "direct")
\end_layout

\begin_layout Plain Layout

    channel.queueDeclare(ticket, "mult_queue")
\end_layout

\begin_layout Plain Layout

    channel.queueBind(ticket, "mult_queue", "mult", "routeroute")
\end_layout

\begin_layout Plain Layout

    // Use the short version of the basicConsume method for convenience.
\end_layout

\begin_layout Plain Layout

    channel.basicConsume(ticket, "mult_queue", false, new SerializedConsumer(chan
nel, this))
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * Example class that accepts Strings coming in from the
\end_layout

\begin_layout Plain Layout

 * ExampleSerializedAMQPDispatcher.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

class ExampleStringAMQPListener {
\end_layout

\begin_layout Plain Layout

  val params = new ConnectionParameters
\end_layout

\begin_layout Plain Layout

  params.setUsername("guest")
\end_layout

\begin_layout Plain Layout

  params.setPassword("guest")
\end_layout

\begin_layout Plain Layout

  params.setVirtualHost("/")
\end_layout

\begin_layout Plain Layout

  params.setRequestedHeartbeat(0)
\end_layout

\begin_layout Plain Layout

  val factory = new ConnectionFactory(params)
\end_layout

\begin_layout Plain Layout

  // thor.local is a machine on your network with rabbitmq listening on port
 5672
\end_layout

\begin_layout Plain Layout

  val amqp = new ExampleSerializedAMQPDispatcher[String](factory, "thor.local",
 5672)
\end_layout

\begin_layout Plain Layout

  amqp.start
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  // Example Listener that just prints the String it receives.
\end_layout

\begin_layout Plain Layout

  class StringListener extends Actor {
\end_layout

\begin_layout Plain Layout

    def act = {
\end_layout

\begin_layout Plain Layout

      react {
\end_layout

\begin_layout Plain Layout

        case msg@AMQPMessage(contents: String) => println("received: " +
 msg); act
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  val stringListener = new StringListener()
\end_layout

\begin_layout Plain Layout

  stringListener.start
\end_layout

\begin_layout Plain Layout

  amqp ! AMQPAddListener(stringListener) 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First of all don't get scared about this.
 The above classes are already existent so you can just reuse them.
 However the point of showing them here is to understand how to use a AMQP
 consumer, how to configure it to match the client settings from the Listing
 1.3
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:AMQP-sending-messages"

\end_inset

.
 The key here is to see how the actual messages are consumed.
 Note the StringListener actor is consumming the 
\family typewriter
AMQPMessage
\family default
 but the actor itself it provided to 
\family typewriter
AMQPDispatcher
\family default
.
 What happens is that when a real AMQP message is received by 
\family typewriter
AMQPDispatcher
\family default
 it will just forward it to the user'sActor for actuall processing.
 SerializedConsumer class is actually doing the transformation of the raw
 data (array of byte-s) into 
\family typewriter
AMQPMessage
\family default
 messages.
\end_layout

\begin_layout Section
PayPal
\end_layout

\begin_layout Standard
Paypal
\begin_inset Foot
status open

\begin_layout Plain Layout
https://www.paypal.com
\end_layout

\end_inset

 is the notorious service that allows you to do online payment transactions.
 Lift supports both 
\end_layout

\begin_layout Standard
PDT(Payment Data Transferr)
\begin_inset Foot
status open

\begin_layout Plain Layout
https://www.paypal.com/en_US/i/IntegrationCenter/scr/scr_ppPDTDiagram_513x282.gif
\end_layout

\end_inset

as well as 
\end_layout

\begin_layout Standard
IPN(Instant Payment Notification)
\begin_inset Foot
status open

\begin_layout Plain Layout
https://www.paypal.com/en_US/i/IntegrationCenter/scr/scr_ppIPNDiagram_555x310.gif
\end_layout

\end_inset

 API' sprovided by PayPal.
 We won't be getting into PayPal API details as this information can be
 found on PayPal site.
 However let's see how we'd use PDT and IPN.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
PDT Example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

import net.liftweb.paypal._
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

object MyPayPalPDT extends PayPalPDT {
\end_layout

\begin_layout Plain Layout

  override def pdtPath = "paypal_complete"
\end_layout

\begin_layout Plain Layout

  def paypalAuthToken = Props.get("paypal.authToken") openOr "cannot find
 auth token from props file"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def pdtResponse: PartialFunction[(PayPalInfo, Req), LiftResponse] = {
\end_layout

\begin_layout Plain Layout

    case (info, req) => println("--- in pdtResponse"); DoRedirectResponse("/acco
unt_admin/index");
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// in Boot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def boot(){
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

  LiftRules.statelessDispatchTable.append(MyPayPalPDT)
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
That is pretty much it.
 
\family typewriter
pdtResponse
\family default
 function allows you to determine the behavior of you application upon receiving
 the reponse from PayPal.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
IPN Example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

import net.liftweb.paypal._
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

object MyPayPalIPN extends PayPalIPN {
\end_layout

\begin_layout Plain Layout

  def actions = {
\end_layout

\begin_layout Plain Layout

    case (ClearedPayment, info, req) => // do your processing here
\end_layout

\begin_layout Plain Layout

    case (RefundedPayment, info, req) => // do refund processing 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// in Boot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def boot(){
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

  LiftRules.statelessDispatchTable.append(MyPayPalIPN)
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see everything is pretty strightforward.
 Just pattern match on the 
\family typewriter
PaypalTransactionStatus
\family default
.
 It is worth to note sthat IPN is a 'machine-to-machine' API which happens
 in the background without the end user interraction.
\end_layout

\begin_layout Section
Facebook
\end_layout

\begin_layout Standard
Facebook
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.facebook.com
\end_layout

\end_inset

 is the well known site that simply allows people to easily interract, build
 social graphs share photos etc.
 Facebook also exposes HTTP API's
\begin_inset Foot
status open

\begin_layout Plain Layout
http://wiki.developers.facebook.com/index.php/API
\end_layout

\end_inset

 that allows other applications to interract with it.
 Lift framework allows your application to easily interract with Facebook
 by providing an abstraction layer over the Facebook API.
 Here is an example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Facebook example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import net.liftweb.ext_api.facebook._
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

FacebookRestApi.apiKey = <your API key>;
\end_layout

\begin_layout Plain Layout

FacebookRestApi.secret = <your secret>;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// The api key is ontained from System.getProperty("com.facebook.api_key")
\end_layout

\begin_layout Plain Layout

// The secreat is obtained from System.setProperty("com.facebook.secret", key)
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Invoke stateless calls
\end_layout

\begin_layout Plain Layout

val respNode: Node = FacebookClient !? AuthCreateToken
\end_layout

\begin_layout Plain Layout

val authToken = // extract authToken from respNode
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Obtain a stateful client based on the authToken
\end_layout

\begin_layout Plain Layout

val faceBookClient = FacebookClient fromAuthToken(authToken)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

faceBookClient !? GetFriendLists
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once you have the FacebookClient you can invoke numerous API methods described
 by 
\family typewriter
FacebookMethod
\family default
 or 
\family typewriter
SessionlessFacebookMethod
\family default
.
 In the above examplewe are creating the FaceBook context by first obtaining
 an authToken and then obtaining a 
\family typewriter
faceBookClient
\family default
 reference bound to the newly created session.
 After that we're just ontaining the friends list.
\end_layout

\begin_layout Section
XMPP
\end_layout

\begin_layout Standard
XMPP
\begin_inset Foot
status open

\begin_layout Plain Layout
http://xmpp.org/
\end_layout

\end_inset

 stands for e
\series bold
X
\series default
tensible 
\series bold
M
\series default
essaging and 
\series bold
P
\series default
resence 
\series bold
P
\series default
rotocol.
 It is an XML-based protocol used for presence and realtime communication
 such as instant messaging (Jabber and GoogleTalk being two of the more
 famous users).
 It is developed by the Jabber
\begin_inset Foot
status open

\begin_layout Plain Layout
http://xmpp.org/about/jabber.shtml
\end_layout

\end_inset

 open-source community.
 Lift provides an XMPP dispatcher implementation that your application can
 use to receive instant messages, manage rosters etc.
 This support relies on the Smack 
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.igniterealtime.org/downloads/index.jsp
\end_layout

\end_inset

 XMPP client library and utilizes Scala actors for the interface.
 Here is an example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
XMPP Example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

import net.liftweb.xmpp._
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * An example Chat application that prints to stdout.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * @param username is the username to login to at Google Talk: format: something
@gmail.com
\end_layout

\begin_layout Plain Layout

 * @param password is the password for the user account at Google Talk.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

class ConsoleChatActor(val username: String, val password: String) extends
 Actor {
\end_layout

\begin_layout Plain Layout

  def connf() = new ConnectionConfiguration("talk.google.com", 5222, "gmail.com")
\end_layout

\begin_layout Plain Layout

  def login(conn: XMPPConnection) = conn.login(username, password)
\end_layout

\begin_layout Plain Layout

  val xmpp = new XMPPDispatcher(connf, login)
\end_layout

\begin_layout Plain Layout

  xmpp.start
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  val chats: Map[String, List[Message]] = new HashMap[String, List[Message]]
\end_layout

\begin_layout Plain Layout

  val rosterMap: HashMap[String, Presence] = new HashMap[String, Presence]
\end_layout

\begin_layout Plain Layout

  var roster: Roster = null
\end_layout

\begin_layout Plain Layout

  def act = loop
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def loop { 
\end_layout

\begin_layout Plain Layout

   react {
\end_layout

\begin_layout Plain Layout

      case Start => {
\end_layout

\begin_layout Plain Layout

        xmpp ! AddListener(this)
\end_layout

\begin_layout Plain Layout

        xmpp ! SetPresence(new Presence(Presence.Type.available))
\end_layout

\begin_layout Plain Layout

        loop
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      case NewChat(c) => {
\end_layout

\begin_layout Plain Layout

        chats += (c.getParticipant -> Nil)
\end_layout

\begin_layout Plain Layout

        loop
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      case RecvMsg(chat, msg) => {
\end_layout

\begin_layout Plain Layout

        println("RecvMsg from: " + msg.getFrom + ": " + msg.getBody);
\end_layout

\begin_layout Plain Layout

        loop 
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      case NewRoster(r) => {
\end_layout

\begin_layout Plain Layout

        println("getting a new roster: " + r)
\end_layout

\begin_layout Plain Layout

        this.roster = r
\end_layout

\begin_layout Plain Layout

        val e: Array[Object] = r.getEntries.toArray.asInstanceOf[Array[Object]]
\end_layout

\begin_layout Plain Layout

        for (entry <- e) {
\end_layout

\begin_layout Plain Layout

          val user: String = entry.asInstanceOf[RosterEntry].getUser
\end_layout

\begin_layout Plain Layout

          rosterMap += (user -> r.getPresence(user))
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        loop
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      case RosterPresenceChanged(p) => { 
\end_layout

\begin_layout Plain Layout

        val user = StringUtils.parseBareAddress(p.getFrom)
\end_layout

\begin_layout Plain Layout

        println("Roster Update: " + user + " " + p)
\end_layout

\begin_layout Plain Layout

        // It's best practice to ask the roster for the presence.
 This is because
\end_layout

\begin_layout Plain Layout

        // multiple presences can exist for one user and the roster knows
 which one 
\end_layout

\begin_layout Plain Layout

        // has priority.
 
\end_layout

\begin_layout Plain Layout

        rosterMap += (user -> roster.getPresence(user))
\end_layout

\begin_layout Plain Layout

        loop
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      case RosterEntriesDeleted(e) => {
\end_layout

\begin_layout Plain Layout

        println(e) 
\end_layout

\begin_layout Plain Layout

        loop 
\end_layout

\begin_layout Plain Layout

      } 
\end_layout

\begin_layout Plain Layout

      case RosterEntriesUpdated(e) => {
\end_layout

\begin_layout Plain Layout

        println(e)
\end_layout

\begin_layout Plain Layout

        loop
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      case RosterEntriesAdded(e) => { 
\end_layout

\begin_layout Plain Layout

        println(e)
\end_layout

\begin_layout Plain Layout

        loop 
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

      case a => println(a); loop
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  def createChat(to: String) {
\end_layout

\begin_layout Plain Layout

    xmpp ! CreateChat(to)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  def sendMessage(to: String, msg: String) {
\end_layout

\begin_layout Plain Layout

    xmpp ! SendMsg(to, msg)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 /**
\end_layout

\begin_layout Plain Layout

  * @returns an Iterable of all users who aren't unavailable along with
 their Presence
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

 def availableUsers: Iterable[(String, Presence)] = {
\end_layout

\begin_layout Plain Layout

   rosterMap.filter((e) => e._2.getType() != Presence.Type.unavailable)
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

object ConsoleChatHelper {
\end_layout

\begin_layout Plain Layout

  /**
\end_layout

\begin_layout Plain Layout

   * @param u is the username
\end_layout

\begin_layout Plain Layout

   * @param p is the password
\end_layout

\begin_layout Plain Layout

   */
\end_layout

\begin_layout Plain Layout

  def run(u: String, p: String) = {
\end_layout

\begin_layout Plain Layout

    val ex = new ConsoleChatActor(u, p)
\end_layout

\begin_layout Plain Layout

    ex.start 
\end_layout

\begin_layout Plain Layout

    ex ! Start 
\end_layout

\begin_layout Plain Layout

    ex 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// To start the dispatcher just call:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ConsoleChatHelper.run(userName, password);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above is an example how you can integrate your application with an XMPP
 server and how messages are pocessed.
\end_layout

\begin_layout Section
Lucene/Compass Integration
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This chapter is still under active development.
 The contents will change.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Search is a requirement for any app
\end_layout

\begin_layout Plain Layout
Dave has some code in ESME for this, I'll ask if we can pinch it as a starting
 point.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
